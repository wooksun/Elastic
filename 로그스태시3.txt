============================================================================================================
logstash-test5.conf 파일의 내용
TIMESTAMP_ISO8601 grok 정규식 패턴의 내용은 아래와 같고 년, 월, 일 구분자로 "-"만 허용한다.
%{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE}?
따라서 2023-11-02은 정상 처리되지만, 2023/11/02과 같이 입력하면 "/" 때문에 에러가 발생된다.
날짜/시간 데이터 정규식 패턴은 로그를 만드는 사용자가 다양한 형태로 만들어 사용하기 때문에 데이터를 
수집하는 쪽에서 반드시 패턴을 통일시켜야 한다. => 사용자 정의 패턴을 만든다.
pattern_definitions 옵션을 사용해서 년-월-일 형태와 년/월/일 형태의 패턴을 모두 사용할 수 있도록 정의한다.

[0123456789] [0-9]
[ABCDEFGHIJKLMNOPQRSTUVWXYZ] [A-Z]
[/-] [-/]
[/\-\\.] [-/\\.]

년, 월, 일을 "-" 또는 "/"를 사용해 구분하려면 [/-], [-/] 패턴 모두 사용이 가능하다.
년, 월, 일을 구분하는데 "-" 또는 "/"를 사용하지  않고 "."를 사용할 경우 pattern_definitions에 "."도 추가해야 한다.
"."는 정규표현식에 아무 문자 1개와 대응되는 기능이므로 "."를 문자로 인식하게 하려면 "\\."로 사용해야 한다.
"-"가 [] 중간에 있으면 ~부터 ~까지의 의미가 있으므로 [] 중간에 사용할 떄는 "\-"로 사용해야 한다.
============================================================================================================
input {
  file {
    path => "C:/k_digital/elasticStack/logstash-7.17.14/filter-example.log"
    start_position => "beginning"
    sincedb_path => "nul"
  }
}

filter {
   grok {
     pattern_definitions => {"MY_TIMESTAMP" => "%{YEAR}[/\-\\.]%{MONTHNUM}[-/\\.]%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE}?"}
     match => {"message" => "\[%{MY_TIMESTAMP:timestamp}\] [ ]*\[%{DATA:id}\] %{IP:ip} %{NUMBER:port} \[%{LOGLEVEL:level}\] \- %{DATA:msg}\."}
  }
}

output {
  stdout{ }
}
============================================================================================================

============================================================================================================
logstash-test6.conf 파일의 내용
대소문자 변경: uppercase, lowercase
uppercase, lowercase 옵션으로 대문자 또는 소문자로 변경할 필드는 [] 안에 ""로 묶어서 입력하면 되고,
대문자 또는 소문자로 변경할 필드가 2개 이상이라면 ["level", "msg"]와 같이 입력하면 된다.
============================================================================================================
input {
  file {
    path => "C:/k_digital/elasticStack/logstash-7.17.14/filter-example.log"
    start_position => "beginning"
    sincedb_path => "nul"
  }
}

filter {
   dissect {
     mapping => {"message" => "[%{?timestamp}]%{?->}[%{?id}] %{?ip} %{?port} [%{level}] - %{msg}"}
  }
  mutate {
     uppercase => ["msg"]
     lowercase => ["level"]
  }
}

output {
  stdout{ }
}
============================================================================================================

============================================================================================================
logstash-test7.conf 파일의 내용
filter 추가
date: 날짜/시간 데이터의 서식을 지정한다.

YYYY-MM-dd HH:mm
YYYY/MM/dd HH:mm:ss
YYYY.MM.dd HH:mm:ss
============================================================================================================
input {
  file {
    path => "C:/k_digital/elasticStack/logstash-7.17.14/filter-example.log"
    start_position => "beginning"
    sincedb_path => "nul"
  }
}

filter {
   dissect {
     mapping => {"message" => "[%{timestamp}]%{?->}[%{?id}] %{?ip} %{?port} [%{?level}] - %{?msg}"}
  }
  mutate {
     strip => "timestamp"
  }
  date {
     match => ["timestamp", "YYYY-MM-dd HH:mm", "YYYY/MM/dd HH:mm:ss", "YYYY.MM.dd HH:mm"]
     target => "my_timestamp"
     timezone => "UTC"
  }
}

output {
  stdout{ }
}
============================================================================================================

============================================================================================================
logstash-test8.conf 파일의 내용
조건문을 이용한 필터: if ~ else
if 조건식 {
  조건이 참일 경우 실행할 내용
} else{
  조건이 거짓일 경우 실행할 내용
}
조건식에 사용하는 필드 이름은 [] 안에 입력하면 되고 이 때, 필드명 앞뒤에 따옴표는 쓰지 않는다.
============================================================================================================
input {
  file {
    path => "C:/k_digital/elasticStack/logstash-7.17.14/filter-example.log"
    start_position => "beginning"
    sincedb_path => "nul"
  }
}

filter {
   dissect {
     mapping => {"message" => "[%{timestamp}]%{?->}[%{id}] %{ip} %{port} [%{level}] - %{msg}"}
  }
  if [level] == "error" {
    drop {}
  } else if [level] == "warn" {
    mutate {
      remove_field => ["@version", "@timestamp", "path", "message", "host", "msg", "timestamp", "port"]
      add_field => {"레벨이" => "error는 아닌데 warn인 경우"}
    }
  } else {
    mutate {
      remove_field => ["@version", "@timestamp", "path", "message", "host", "level", "timestamp", "port"]
      add_field => {"레벨이" => "error도 아니고 warn도 아닌 경우"}
    }
  }
}

output {
  stdout{ }
}
============================================================================================================

============================================================================================================
logstash-test9.conf 파일의 내용
출력 플러그인
============================================================================================================
input {
  file {
    path => "C:/k_digital/elasticStack/logstash-7.17.14/filter-example.log"
    start_position => "beginning"
    sincedb_path => "nul"
  }
}

filter {
  mutate {
    # 로그스태시 파이프라인 파일에 "#"으로 시작하는 문장은 주석으로 처리된다.
    # uppercase => ["message"]
  }
}

output {
  # stdout{ }
  file {
    path => "C:/k_digital/elasticStack/elasticsearch-7.17.14/config/output.json"
  }
  elasticsearch {
    index => "output"
  }
}
============================================================================================================