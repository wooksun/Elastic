# terms query
# terms query는 용어 수준 쿼리의 일종이며 여러 용어들을 검색한다.
# keyword 타입으로 매핑된 필드에서 사용해야 하며, 분석기를 거치지 않기 때문에
# 대소문자도 신경 써야 한다.
# term query를 사용할 떄는 검색할 용어를 그냥 쓰면 되지만 terms query는
# 여러개의 용어들을 검색해야하므로 []에 묶어서 써야한다.

GET kibana_sample_data_ecommerce/_search
{
  "_source": ["day_of_week", "day_of_week_i"],
  "query": {
    "terms": {
      "day_of_week": [
        "Monday",
        "Friday"
      ]
    }
  }
}

# multi_match query
# multi_match 쿼리는 전문 검색의 일종이므로 text 타입으로 매핑된 필드에서 
# 사용한다.
# match, match_phrase, term, terms 쿼리는 검색할 데이터가 저장된 필드 이름을 
# 정확히 알고있을 때 사용한다.
# 하지만 검색하려는 용어나 구절이 정확히 어떤 필드에 있는지 모르는 경우가
# 발생될 수 있는데 이때 사용하는 쿼리가 multi_match 쿼리이다.
# multi_match 쿼리는 단일 필드에서만 검색을 하지 않고 여러개의 필드에서 검색이
# 가능하다.

# query 파라미터에 검색하려는 내용을 입력한다.
# fields 파라미터의 [] 내부에 검색어로 입력한 내용이 있을것으로 예상되는 필드
# 목록을 나열한다. [] 내부에 필드 목록을 입력하지 않으면 전체 필드에서 검색한다.
# fields 파라미터에 []를 사용하지 않고 필드 이름 1개만 적어도 실행이 되는데
# 에러가 발생되지 않고 실행되는 이유는 와일드카드 문자를 사용해서 검색어로
# 입력한 내용이 있을것으로 예상되는 필드명을 지정할 수 있기 때문이다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": [
    "customer_first_name", 
    "customer_full_name", 
    "customer_last_name"
    ],
    "query": {
      "multi_match": {
        "query": "mary",
        "fields": [
          "customer_first_name", 
          "customer_full_name", 
          "customer_last_name"
        ]
      }
    }
}

# 와일드카드를 이용한 multi_match 쿼리
# "_source" 파라미터에도 와일드 카드를 사용해서 얻어오려는 필드를 지정할 수 있다
GET kibana_sample_data_ecommerce/_search
{
  "_source": "customer_*_name",
    "query": {
      "multi_match": {
        "query": "mary",
        "fields": "customer_*_name"
      }
    }
}

# 검색어가 있을것으로 예상되는 필드에 가중치를 부여할 수 있다.
# 특정 필드에 가중치를 부여하는 방법을 부스팅(boosting) 기법이라고 한다.
# 블로그에서 검색한다고 햇을 때 "엘라스틱"이라는 용어가 본문에도 있고,
# 제목에도 있을 때 일반적으로 제목에 "엘라스틱"이라는 용어가 있는 도큐먼트가
# 더 중요할 가능성이 높은데, 이럴 경우 제목 필드에 가중치를 준다.
# 가중치는 가중치를 부여하려는 필드 뒤에 "^" 기호와 가중치를 적어주면 된다.

GET kibana_sample_data_ecommerce/_search
{
  "_source": "customer_*_name",
    "query": {
      "multi_match": {
        "query": "underwood",
        "fields": [
          "customer_first_name", 
          "customer_full_name^2", 
          "customer_last_name"
        ]
      }
    },
    "explain": true
}

# ------------------------------------------------------

GET kibana_sample_data_flights/_mapping

# range(범위) query
# 날짜나 숫자의 범위를 지정해 범위 안에 포함된 데이터들을 검색할 때 사용한다.
# 날짜, 숫자, ip 주소 타입의 데이터에 range 쿼리가 사용 가능하고 문자열 타입의 
# 데이터에는 range 쿼리를 사용할 수 없다.
# 범위 지정에 사용되는 파라미터(연산자)는 gte(크거나 같다), gt(크다),
# lte(작거나 같다), lt(작다)가 있다.

GET kibana_sample_data_flights/_search
{
  "_source": ["timestamp"],
  "query": {
    "range": {
      "timestamp": {
        "gte": "2023-10-27", 
        "lte": "2023-10-28"
      }
    }
  }
}

# 날짜/시간 검색은 보통 현재를 기준으로 하는 경우가 많기 때문에 현재(now)를
# 기준으로 범위를 지정한다.
# 현재 시간을 의미하는 now에 "+", "-" 연산을 이용해서 날짜를 지정할 수 있다.
# now: 현재 시간, now+1d: 현재 시간 + 1일
# y: 년, M: 월, w: 주, d: 날짜, h: 시간, m: 분, s: 초
GET kibana_sample_data_flights/_search
{
  "_source": ["timestamp"],
  "query": {
    "range": {
      "timestamp": {
        "gte": "now+1w"      }
    }
  }
}

# 엘라스틱서치는 아래와 같이 6개의 범위 데이터 타입을 제공한다.
# integer_range, long_range, float_range, double_range, date_range, ip_range

# 날짜/시간 범위 타입을 가지는 인덱스 생성
PUT range_test_index
{
  "mappings": {
    "properties": {
      "test_date": {
        "type": "date_range"
      }
    }
  }
}
GET range_test_index/_mapping
GET range_test_index/_search

# date_range 타입의 필드에 date 타입의 데이터를 입력하면 에러가 발생된다.
PUT range_test_index/_doc/1
{
  "test_date": "2023-10-27"
}

# date_range 타입의 필드에는 "gte", "gt", "lte", "lt" 파라미터를 이용해서 범위를
# 지정해서 입력해야 한다.
PUT range_test_index/_doc/1
{
  "test_date": {
    "gte": "2023-10-27"
  }
}

PUT range_test_index/_doc/2
{
  "test_date": {
    "gte": "2023-10-27",
    "lt": "2023-10-31"
  }
}

# 정수 범위 타입을 가지는 인덱스 생성
PUT range_test_index2
{
  "mappings": {
    "properties": {
      "test_integer": {
        "type": "integer_range"
      }
    }
  }
}
GET range_test_index2/_mapping
GET range_test_index2/_search

# integer_range 타입의 필드에 integer 타입의 데이터를 입력하면 에러가 발생된다.
PUT range_test_index2/_doc/1
{
  "test_integer": 10
}

PUT range_test_index2/_doc/1
{
  "test_date": {
    "gte": 0
  }
}

PUT range_test_index2/_doc/2
{
  "test_date": {
    "gte": 0,
    "lt": 100
  }
}

# bool(논리) query
# bool 쿼리는 복합 쿼리로 위에서 실습해본 쿼리를 조합해서 사용하고 쿼리를
# 조합할 수 있도록 4개의 타입(must, must_not, should, filter)이 지원된다.

# must 타입
# 쿼리를 실행해서 모두 참인 도큐먼트를 찾는다. 복수개의 쿼리는 AND 연산을 한다.

# 한 개의 쿼리를 사용하는 must 타입
# bool query는 한 개의 쿼리를 실행할 때는 []를 생략할 수 있다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_first_name"], 
  "query": {
    "bool": {
      "must": 
        {"match": {"customer_first_name": "mary"}}
    }
  }
}

# 복수 개의 쿼리를 사용하는 must 타입
# bool query는 복수개의 쿼리를 실행할 수 있으므로 [] 내부에 쿼리를 작성한다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_first_name", "day_of_week", "category"], 
  "query": {
    "bool": {
      "must": [
        {"term": {"day_of_week": "Sunday"}},
        {"match": {"customer_first_name": "mary"}},
        {"match": {"category": "clothing"}}
      ]
    }
  }
}

# must_not 타입
# bool 쿼리 실행 결과에서 제외할 도쿠만트를 찾는 쿼리를 실행한다.
# must 속성을 사용해서 실행한 결과에서 must_not 속성을 실행한 결과를 제외한다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name", "day_of_week", "category"], 
  "query": {
    "bool": {
      "must": [
        {"term": {"day_of_week": "Sunday"}},
        {"match": {"customer_first_name": "mary"}},
        {"match": {"category": "clothing"}}
      ],
      "must_not": [
        {"match": {"customer_last_name": "bailey"}}
      ]
    }
  }
}

# should
# 쿼리를 실행해서 1개 이상 참인 도큐먼트를 찾는다. 
# 복수개의 쿼리는 OR 연산을 한다.

# 한 개의 쿼리를 사용하는 should 타입
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_first_name"], 
  "query": {
    "bool": {
      "should": 
        {"match": {"customer_first_name": "mary"}}
    }
  }
}

# 복수 개의 쿼리를 사용하는 should 타입
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name", "day_of_week", "category"], 
  "query": {
    "bool": {
      "should": [
        {"term": {"day_of_week": "Sunday"}},
        {"match": {"customer_first_name": "mary"}},
        {"match": {"category": "clothing"}}
      ]
    }
  }
}

# filter 타입
# filter 타입은 must 타입과 같은 동작을 하지만 유사도 스코어에 영향을 미치지 
# 않는다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["texful_total_price", "day_of_week"],
  "query": {
    "bool": {
      "filter": [
        {"range": {"texful_total_price": {"gte": 25,"lte": 40}}},
        {"term": {"day_of_week": "Friday"}}
      ]
    }
  }
}

GET kibana_sample_data_ecommerce/_search
{
  "_source": ["texful_total_price", "day_of_week"],
  "query": {
    "bool": {
      "filter": [
        {"range": {"texful_total_price": {"gte": 25,"lte": 40}}}
      ],
      "must_not": [
        {"term": {"day_of_week": "Wednesday"}}
      ]
    }
  }
}

# 검색을 먼저 실행하고 필터링링 하면 불필요한 데이터를 검색하게 되므로 필터링을
# 먼저하고 검색하면 검색 성능을 향상시킬 수 있다.

# 전문 검색을 먼저 실행하고 필터링을 실행한다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name", "day_of_week"],
  "query": {
    "bool": {
      "must": [
        {"match": {"customer_full_name": "mary"}}
      ],
      "filter": [
        {"term": {"day_of_week": "Monday"}}
      ]
    }
  }
}

# 필터링을 먼저 실행하고 전문 검색을 실행한다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name", "day_of_week"],
  "query": {
    "bool": {
      "filter": [
        {"term": {"day_of_week": "Monday"}}
      ],
      "must": [
        {"match": {"customer_full_name": "mary"}}
      ]
    }
  }
}

# 패턴 검색
# 검색하려는 검색어를 정확히 알지 못하는 경우나 검색어가 너무 길어서 전체를
# 입력하는 것이 불편할 경우 검색어의 일부분을 알고있다면 패턴을 이용해서 검색을
# 할 수 있다.
# 와일드카드를 이용하는 방법과 정규식을 이용하는 방법이 있다.

# 와일드카드를 이용하는 패턴 검색 쿼리리
# 와일드카드는 용어를 검색할 때 "*"과 "?"를 사용할 수 있다.
# "*"은 글자 수와 상관없이 모든 문자를 매칭할 수 있다.
# "?"은 오직 한 문자만 매칭할 수 있다.

# customer_full_name 필드는 text 타입의 필드이므로 "ma*"처럼 와일드 카드를
# 사용하면 각 토큰에서 "ma"로 시작하는 내용이 있으면 검색되므로 "Mary Bailey"도
# 검색되고 "Boris Maldonado"도 검색된다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name"],
  "query": {
    "wildcard": {
      "customer_full_name": "m???"
    }
  }
}

# customer_full_name.keyword 필드는 keyword 타입의 필드이므로 대소문자를
# 구분하고, 토큰화를 하지 않기 때문에 전체 용어에서 "Ma*"로 시작하는 내용만
# 검색되므로 "Mary Bailey"는 검색되지만 "Boris Maldonado"는 검색되지 않는다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_*_name"],
  "query": {
    "wildcard": {
      "customer_full_name.keyword": "Ma*"
    }
  }
}

# 정규식을 이용하는 패턴 검색 쿼리
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_*_name"],
  "query": {
    "regexp": {
      "customer_first_name.keyword": "Mar."
    }
  }
}